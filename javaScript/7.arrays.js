// Создать массив можно двумя способами:
const arr = []
const arr2 = Array(1) // где 1 - длина созданного массива.
// При этом массив инициализируется с пустыми значениями.
// Чтобы заполнить созданный массив, можно использовать метод arr.fill()
arr.fill("value")

// Массив — это объект. Чтобы проверить, является ли объект массивом, можно использовать метод Array.isArray(arr).

// Узнать длину массива можно с помощью свойства arr.length.
arr2.length // 1

// Добавление/удаление элементов в массив можно делать с помощью методов:
arr.push("value") // добавляет item в конец массива
arr.pop() // удаляет последний  элемент массива и возвращает его значение
arr.unshift("value") // добавляет item в начало массива
arr.shift() // удаляет первый элемент массива и возвращает его значение

// Чтобы осуществить обход массива, можно использовать:
// Цикл for: for (let i = 0; i < arr.length; i++)
// Цикл for, перебирающий элементы: for (const item of arr)
// Метод forEach: arr.forEach((item, index, arr) => { })

// Для чтения элементов массива, как и в объектах, можно использовать деструктуризацию
const users = ['John', 'Pete']
const [firstUser, secondUser] = users  // в firstUser запишется строка 'John', а в secondUser — 'Pete'

// А если массив содержит больше элементов, чем мы хотим прочитать, оставшиеся элементы можно получить через rest-оператор
const users2 = ['John', 'Pete', 'Ann']
const [firstUser2, ...rest] = users2
console.log(`${firstUser2} and ${rest.length} other users liked`); // John and 2 other users liked
//В переменную rest записался массив, состоящий из двух элементов: "Pete" и "Ann"

// Основные методы массивов
arr.map() // создание нового массива в соответствие с возвращаемыми значениями переданной функции
arr.reduce() // вычисление значения в результате обхода всех элементов массива
arr.every() // проверка, удовлетворяют ли все элементы массива заданному в функции условию
arr.some() // проверка, удовлетворяет ли хотя бы один элемент массива заданному в функции условию
arr.splice() // удаление/добавление элементов
arr.slice() // создание копии целого массива или его части
arr.join() // склейка элементов массива в строку
arr.reverse() // разворачивает исходный массив, не делает его копию
arr.sort() // сортировка массива в соответствии с переданной функцией-компаратором
// Если функция-компаратор не передана, массив будет отсортирован в соответствии с порядком символов в кодировке Unicode