// Объект - это набор свойств, которые представляют из себя пару - ключ и значение.

let John = {
  gender: "male",
  knowJS: true,
  age: 26
}

// По ключу можно обратиться к значению свойства объекта.
// Ключ свойства должен иметь тип string или другой тип, который можно преобразовать к string.
// Например, если задать свойство с ключом true типа boolean, то ключ будет преобразован в 'true' типа string.
// Значение свойства может иметь любой тип.

let Dave = {
  gender: "male",
  knowJS: false,
  age: 26,
  user: {
    isAuth: true,
    role: "admin"
  }
}


// Чтение свойств
// Обратиться к свойству объекта можно:
// через точку
Dave.age // 26
Dave.user.isAuth // true

// через квадратные скобки и имя свейства
Dave["gender"] // male

// через квадратные скобки и переменную, содержащую имя свойства (obj[prop], где prop = 'property')
let prop = "knowJS"
Dave[prop]

// Ещё один способ обратиться к свойству, который часто удобен на практике, — с помощью деструктурирующего присваивания
// Оно позволяет "распаковать" объект в несколько переменных по названиям свойств объекта
const {gender, age} = Dave
age // 26
gender // male

// Другие операции с объектами
// Удалить свойство можно с помощью оператора delete
delete John.age

// Проверить существование свойства можно с помощью:
// Обращения к этому свойству и проверки, является ли значение undefined
John.age === undefined // true, потому что мы удалили это свойство
// Оператора in ('property' in obj)
"age" in John // false

// Метода hasOwnProperty (obj.hasOwnProperty)
John.hasOwnProperty("age") // false

// Перебор свойств объекта можно осуществить с помощью цикла: for (property in obj). Также для итерации по объекту можно использовать:
Object.keys(Dave) // вернет массив ключей свойств объекта
Object.values(Dave) // вернет массив значений свойств объекта
Object.entries(Dave) // вернет массив массивов вида [ключ, значение]